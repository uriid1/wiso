# !/bin/bash

#//******************************//#
#//# Author: by uriid1		#//#
#//# license: GNU GPL		#//#
#//# telegram: uriid1		#//#
#//# Mail: appdurov@gmail.com	#//#
####****************************####

# Константы
readonly version="1.0.8"
readonly c_error='\033[5m'
readonly c_yellow='\033[33m'
readonly c_red='\033[31m'
readonly c_green='\033[32m'
readonly c_def='\033[0m'

# Глобальные var
__error=0
__find=0

# Отображение важной информации
head_info() {
	clear
	echo -e "${c_green} Iso Writer by uriid1 ${c_def} | ${c_yellow} version: $version ${c_def} \n"
}

# Проверяем существование програм в ос
head_info
list_spo=(dd readlink grep find sed lsblk wipefs head)

echo -e "Сhecking the availability of the necessary tools: \n"
for ((i = 0; i < ${#list_spo[*]}; ++i))
do
	spo_check() {
		__ok="none"
		local pname=$(which $1 . 2>/dev/null)
		if [ -n "$pname" ]; then
			__ok="${c_green} Ok ${c_def}"
		else
			__ok="${c_error}${c_red} Fail ${c_def}"
			__error=$((__error + 1))
		fi
	}
	spo_check ${list_spo[$i]}
	spo_info+=( $(echo "|${list_spo[$i]}|-|$__ok| \n") )
	
	if [ "$i" -eq "$((${#list_spo[*]}-1))" ]; then
		if [ "$__error" -eq "0" ]; then
			__find=1
		fi
	fi
	
done

# Выводим красиво инфу о сущ. по
echo -e "${spo_info[@]}" | column -t -s '|'
echo -e "\n"
sleep 1

# Функция записи iso на флешку 
write_iso() {
	head_info
	echo -e "You have chosen: \n"
	echo 	"  USB: ${usb_name_list_sed[$usb_index]}"
	echo -e "  ISO: ${iso_list[$iso]} \n"
	echo -e "Enter the password for recording the image \n"
	
	sudo wipefs --all ${usb_mount_list[$usb_index]} . 2>/dev/null
	sudo dd bs=4M if=${iso_list[$iso]} of=${usb_mount_list[$usb_index]} status=progress oflag=sync
}

# Функция поиска iso образов
find_iso() {
	head_info
	echo -e "Found iso: \n"
	iso_list+=( $(find /home/$USER -type f -name "*.iso") )
	
	# Если нашли хоть один образ
	if [ -n  "${iso_list[0]}" ];
	then
		# Выводим список найденых iso
		for ((i = 0; i < ${#iso_list[*]}; ++i))
		do
			iso_found+=( $(echo "$i) | ${iso_list[$i]##*/} \n") )
		done
		
		echo -e "index | Name \n ${iso_found[@]}" | column -t -s '|'
		echo
		
		read -p "Select the iso image (0-$((${#iso_list[*]}-1))): " iso
		
		# Всё ок, пишим iso
		write_iso
	else
		echo -e "No iso images were found in the 'home' directory \n"
	fi
}

# Если всё ПО есть
if [ "$__find" -eq "1" ];
then
	head_info
	# Получаем список подключённых USB
	for i in /dev/disk/by-id/usb*
	do
		usb_name_list+=( $(echo $i | sed '/part/d') )
	done
else
	echo -e "Oops! it Seems you don't have all the Software installed... \n"
fi

# В случае если нашли хоть одну флешку
if [ "${usb_name_list[0]}" != "/dev/disk/by-id/usb*" ] && [ "$__find" -eq "1" ];
then
	# Форматируем в вид для домохозяйки
	for ((i = 0; i < ${#usb_name_list[*]}; ++i))
	do
		# Получаем точки монтирования
		usb_mount_list+=( $(readlink -f ${usb_name_list[$i]}) )
		# Форматируем имя флешек к приятному виду
		usb_name_list_sed+=( $(echo ${usb_name_list[$i]} | sed 's/.*usb-\(.*\)-[0-9]:.*/\1/' | cut -c 1-24) )
		# Получаем размер флешек
		usb_size_list+=( $(lsblk -o SIZE ${usb_mount_list[$i]} | sed '/SIZE/d' | head -n1) )
		
		# Сохраняем инфу о флешках
		usb_info+=( $(echo "| $i) | ${usb_mount_list[$i]} | ${usb_name_list_sed[$i]} | ${usb_size_list[$i]} \n") )
	done
	
	# Выводим красиво инфу о флешках
	echo -e " | index | Mount | Disk | Size | \n ${usb_info[@]}" | column -t -s '|'
	echo

	# Просим указать индекс записываемого устройства
	read -p "Enter the flash drive index (0-$((${#usb_name_list[*]}-1))): " usb_index
	
	# Если ввели существующий индекс флешки
	if [ -n "${usb_mount_list[$usb_index]}" ];
	then
		# Ищем iso образы
		find_iso
	else
		echo -e "\n You entered a nonexistent index! \n"
		sleep 2
		exec "$0" && exit 0
	fi
else
	echo -e "No USB devices were identified! Errors found: $__error \n"
fi
